/**
 * SCSS/Sass Sample File for Theme Testing
 * This file demonstrates Sass-specific syntax including variables, mixins, nesting, and functions
 */

// Variables
$primary-color: #4B83CD;
$secondary-color: #7A3E9D;
$success-color: #448C27;
$danger-color: #AA3731;
$warning-color: #FF8C00;
$info-color: #17A2B8;

$bg-primary: #f5f5f5;
$bg-secondary: #ffffff;
$text-primary: #333333;
$text-secondary: #666666;
$text-muted: #AAAAAA;

$font-family-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
$font-family-mono: 'SF Mono', 'Monaco', 'Inconsolata', 'Fira Code', monospace;

// Spacing scale
$spacings: (
  xs: 0.25rem,
  sm: 0.5rem,
  md: 1rem,
  lg: 1.5rem,
  xl: 2rem,
  xxl: 3rem
);

// Breakpoints
$breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);

// Z-index scale
$z-indexes: (
  dropdown: 1000,
  sticky: 1020,
  fixed: 1030,
  modal-backdrop: 1040,
  modal: 1050,
  popover: 1060,
  tooltip: 1070
);

// Functions
@function spacing($key) {
  @return map-get($spacings, $key);
}

@function breakpoint($key) {
  @return map-get($breakpoints, $key);
}

@function z-index($key) {
  @return map-get($z-indexes, $key);
}

// Color manipulation functions
@function lighten-color($color, $percentage) {
  @return lighten($color, $percentage);
}

@function darken-color($color, $percentage) {
  @return darken($color, $percentage);
}

@function alpha-color($color, $alpha) {
  @return rgba($color, $alpha);
}

// Mixins
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin button-variant($bg-color, $text-color: white, $border-color: $bg-color) {
  background-color: $bg-color;
  color: $text-color;
  border: 1px solid $border-color;
  
  &:hover:not(:disabled) {
    background-color: darken($bg-color, 10%);
    border-color: darken($border-color, 10%);
  }
  
  &:focus {
    box-shadow: 0 0 0 0.2rem alpha-color($bg-color, 0.25);
  }
  
  &:disabled {
    opacity: 0.65;
    cursor: not-allowed;
  }
}

@mixin media-breakpoint-up($name) {
  $min: breakpoint($name);
  @if $min != 0 {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name) {
  $max: breakpoint($name) - 0.02;
  @media (max-width: $max) {
    @content;
  }
}

@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin clearfix {
  &::after {
    display: block;
    clear: both;
    content: "";
  }
}

// Animation and transition mixins
@mixin transition($properties: all, $duration: 0.2s, $easing: ease-in-out) {
  transition: $properties $duration $easing;
}

@mixin transform($transforms) {
  transform: $transforms;
}

@mixin animation($name, $duration: 1s, $easing: ease, $delay: 0s, $iteration: 1, $direction: normal, $fill-mode: both) {
  animation: $name $duration $easing $delay $iteration $direction $fill-mode;
}

// Grid mixins
@mixin make-container($max-width: 1200px) {
  width: 100%;
  max-width: $max-width;
  margin: 0 auto;
  padding: 0 spacing(md);
}

@mixin make-row {
  display: flex;
  flex-wrap: wrap;
  margin: 0 -(spacing(sm));
}

@mixin make-col($size, $columns: 12) {
  flex: 0 0 percentage($size / $columns);
  max-width: percentage($size / $columns);
  padding: 0 spacing(sm);
}

// Placeholder selectors
%button-base {
  display: inline-block;
  padding: spacing(sm) spacing(md);
  font-size: 1rem;
  font-weight: 500;
  line-height: 1.5;
  text-align: center;
  text-decoration: none;
  vertical-align: middle;
  cursor: pointer;
  border: 1px solid transparent;
  border-radius: 0.375rem;
  user-select: none;
  @include transition();
  
  &:focus {
    outline: 0;
  }
}

%card-base {
  background-color: $bg-secondary;
  border: 1px solid #e9ecef;
  border-radius: 0.375rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

%form-control-base {
  display: block;
  width: 100%;
  padding: spacing(sm) spacing(md);
  font-size: 1rem;
  line-height: 1.5;
  color: $text-primary;
  background-color: $bg-secondary;
  border: 1px solid #ced4da;
  border-radius: 0.375rem;
  @include transition(border-color, 0.15s);
  
  &:focus {
    outline: 0;
    border-color: $primary-color;
    box-shadow: 0 0 0 0.2rem alpha-color($primary-color, 0.25);
  }
}

// Base styles with nesting
body {
  font-family: $font-family-primary;
  font-size: 1rem;
  line-height: 1.6;
  color: $text-primary;
  background-color: $bg-primary;
  
  // Nested selector
  &.no-scroll {
    overflow: hidden;
  }
  
  &.dark-theme {
    background-color: #121212;
    color: #ffffff;
    
    .card {
      background-color: #1e1e1e;
      border-color: #333;
    }
  }
}

// Component styles with nesting and parent selectors
.navbar {
  @include flex-between;
  padding: spacing(md);
  background-color: $bg-secondary;
  border-bottom: 1px solid #e9ecef;
  
  .nav-brand {
    @include flex-center;
    
    .logo {
      height: 40px;
      
      img {
        height: 100%;
        width: auto;
      }
    }
  }
  
  .nav-menu {
    @include flex-center;
    list-style: none;
    margin: 0;
    padding: 0;
    
    li {
      margin: 0 spacing(sm);
      
      &:first-child {
        margin-left: 0;
      }
      
      &:last-child {
        margin-right: 0;
      }
    }
    
    .nav-link {
      padding: spacing(sm) spacing(md);
      color: $text-secondary;
      text-decoration: none;
      @include transition();
      
      &:hover,
      &.active {
        color: $primary-color;
      }
    }
  }
  
  .mobile-menu-toggle {
    display: none;
    flex-direction: column;
    background: none;
    border: none;
    cursor: pointer;
    padding: spacing(xs);
    
    .hamburger-line {
      width: 1.5rem;
      height: 0.125rem;
      background-color: $text-primary;
      margin: 0.125rem 0;
      @include transition();
      
      &:first-child {
        margin-top: 0;
      }
      
      &:last-child {
        margin-bottom: 0;
      }
    }
    
    &[aria-expanded="true"] {
      .hamburger-line {
        &:nth-child(1) {
          @include transform(rotate(45deg) translate(0.375rem, 0.375rem));
        }
        
        &:nth-child(2) {
          opacity: 0;
        }
        
        &:nth-child(3) {
          @include transform(rotate(-45deg) translate(0.375rem, -0.375rem));
        }
      }
    }
  }
}

// Button components using mixins and inheritance
.btn {
  @extend %button-base;
  
  &-primary {
    @include button-variant($primary-color);
  }
  
  &-secondary {
    @include button-variant($secondary-color);
  }
  
  &-success {
    @include button-variant($success-color);
  }
  
  &-danger {
    @include button-variant($danger-color);
  }
  
  &-warning {
    @include button-variant($warning-color);
  }
  
  &-info {
    @include button-variant($info-color);
  }
  
  &-outline {
    @include button-variant(transparent, $primary-color, $primary-color);
    
    &:hover:not(:disabled) {
      background-color: $primary-color;
      color: white;
    }
  }
  
  // Size modifiers
  &-small {
    padding: spacing(xs) spacing(sm);
    font-size: 0.875rem;
  }
  
  &-large {
    padding: spacing(md) spacing(lg);
    font-size: 1.125rem;
  }
  
  // State modifiers using & parent selector
  &:disabled {
    opacity: 0.65;
    cursor: not-allowed;
  }
}

// Form components
.form-group {
  margin-bottom: spacing(md);
  
  label {
    display: block;
    margin-bottom: spacing(xs);
    font-weight: 500;
    color: $text-primary;
  }
  
  .form-control {
    @extend %form-control-base;
    
    &.is-invalid {
      border-color: $danger-color;
      
      &:focus {
        border-color: $danger-color;
        box-shadow: 0 0 0 0.2rem alpha-color($danger-color, 0.25);
      }
    }
    
    &.is-valid {
      border-color: $success-color;
      
      &:focus {
        border-color: $success-color;
        box-shadow: 0 0 0 0.2rem alpha-color($success-color, 0.25);
      }
    }
  }
  
  .form-text {
    margin-top: spacing(xs);
    font-size: 0.875rem;
    color: $text-muted;
  }
  
  .invalid-feedback {
    margin-top: spacing(xs);
    font-size: 0.875rem;
    color: $danger-color;
  }
  
  .valid-feedback {
    margin-top: spacing(xs);
    font-size: 0.875rem;
    color: $success-color;
  }
}

// Card component with nesting
.card {
  @extend %card-base;
  margin-bottom: spacing(lg);
  
  &-header {
    padding: spacing(md);
    border-bottom: 1px solid #e9ecef;
    background-color: #f8f9fa;
    font-weight: 600;
    
    &:first-child {
      border-top-left-radius: inherit;
      border-top-right-radius: inherit;
    }
  }
  
  &-body {
    padding: spacing(md);
    
    .card-title {
      margin-bottom: spacing(sm);
      font-size: 1.25rem;
      font-weight: 600;
    }
    
    .card-subtitle {
      margin-bottom: spacing(md);
      color: $text-muted;
    }
    
    .card-text {
      &:last-child {
        margin-bottom: 0;
      }
    }
  }
  
  &-footer {
    padding: spacing(md);
    border-top: 1px solid #e9ecef;
    background-color: #f8f9fa;
    
    &:last-child {
      border-bottom-left-radius: inherit;
      border-bottom-right-radius: inherit;
    }
  }
  
  // Card variants
  &.card-outline {
    border: 2px solid $primary-color;
    box-shadow: none;
  }
  
  &.card-elevated {
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    
    &:hover {
      box-shadow: 0 8px 15px rgba(0, 0, 0, 0.15);
      @include transform(translateY(-2px));
    }
  }
}

// Grid system using mixins
.container {
  @include make-container();
}

.container-fluid {
  @include make-container(100%);
}

.row {
  @include make-row;
}

// Generate column classes using loops
@for $i from 1 through 12 {
  .col-#{$i} {
    @include make-col($i);
  }
}

// Responsive utilities using media query mixins
@include media-breakpoint-down(md) {
  .navbar {
    .mobile-menu-toggle {
      display: flex;
    }
    
    .nav-menu {
      display: none;
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      flex-direction: column;
      background-color: $bg-secondary;
      border-top: 1px solid #e9ecef;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      
      &.active {
        display: flex;
      }
      
      li {
        margin: 0;
        border-bottom: 1px solid #e9ecef;
        
        &:last-child {
          border-bottom: none;
        }
      }
      
      .nav-link {
        display: block;
        padding: spacing(md);
      }
    }
  }
  
  .row {
    flex-direction: column;
  }
  
  @for $i from 1 through 12 {
    .col-#{$i} {
      flex: 0 0 100%;
      max-width: 100%;
      margin-bottom: spacing(md);
    }
  }
}

// Utility classes using loops and conditionals
$utilities: (
  "margin": (
    property: margin,
    values: $spacings
  ),
  "padding": (
    property: padding,
    values: $spacings
  ),
  "text-align": (
    property: text-align,
    values: (
      left: left,
      center: center,
      right: right
    )
  )
);

@each $utility, $config in $utilities {
  $property: map-get($config, property);
  $values: map-get($config, values);
  
  @each $key, $value in $values {
    .#{$utility}-#{$key} {
      #{$property}: $value !important;
    }
  }
}

// Animation keyframes
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideInUp {
  from {
    @include transform(translateY(100%));
    opacity: 0;
  }
  to {
    @include transform(translateY(0));
    opacity: 1;
  }
}

@keyframes bounce {
  0%, 20%, 53%, 80%, 100% {
    @include transform(translateY(0));
  }
  40%, 43% {
    @include transform(translateY(-30px));
  }
  70% {
    @include transform(translateY(-15px));
  }
  90% {
    @include transform(translateY(-4px));
  }
}

// Animation utility classes
.fade-in {
  @include animation(fadeIn, 0.5s);
}

.slide-in-up {
  @include animation(slideInUp, 0.3s);
}

.bounce {
  @include animation(bounce, 2s, infinite);
}

// Print styles with nesting
@media print {
  * {
    background: transparent !important;
    color: black !important;
    box-shadow: none !important;
    text-shadow: none !important;
  }
  
  body {
    font-size: 12pt;
    line-height: 1.3;
  }
  
  .navbar,
  .mobile-menu-toggle,
  .btn {
    display: none !important;
  }
  
  .card {
    border: 1px solid #999 !important;
    box-shadow: none !important;
    page-break-inside: avoid;
  }
}

// Conditionals and control structures
$enable-rounded: true;
$enable-shadows: true;
$enable-transitions: true;

@if $enable-rounded {
  .rounded {
    border-radius: 0.375rem !important;
  }
  
  .rounded-circle {
    border-radius: 50% !important;
  }
}

@if $enable-shadows {
  .shadow {
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1) !important;
  }
  
  .shadow-lg {
    box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1) !important;
  }
}

@if not $enable-transitions {
  * {
    transition: none !important;
  }
}